import re
from typing import NamedTuple, Optional, List, Dict, Any, Tuple

# --- Type Definitions from mypy_improvement_plans.md ---

class BoundingBox(NamedTuple):
    south: float
    west: float
    north: float
    east: float

class GeographicFilter(NamedTuple):
    area_name: Optional[str]
    bounding_box: Optional[BoundingBox]

class OsmTag(NamedTuple):
    key: str
    value: str

class ParsedPrompt(NamedTuple):
    feature: str
    geographic_filter: GeographicFilter

# --- Tool Functions ---

google_web_search = None
web_fetch = None

# --- Core Functions ---

def parse_prompt(prompt: str) -> Optional[ParsedPrompt]:
    """
    Parses the natural language prompt to extract key entities.
    """
    pattern = r"(?:find|show me)?\s*(?:all)?\s*(.*?)\s+(in|within)\s+(.*)"
    match = re.search(pattern, prompt, re.IGNORECASE)

    if match:
        feature = match.group(1).strip()
        location_str = match.group(3).strip()

        # Check for bbox
        bbox_match = re.search(r"bbox ([\d\.,-]+)", location_str, re.IGNORECASE)
        if bbox_match:
            try:
                coords = [float(c) for c in bbox_match.group(1).split(',')]
                bbox = BoundingBox(south=coords[0], west=coords[1], north=coords[2], east=coords[3])
                geo_filter = GeographicFilter(area_name=None, bounding_box=bbox)
                return ParsedPrompt(feature=feature, geographic_filter=geo_filter)
            except (ValueError, IndexError):
                return None # Invalid bbox format

        # Remove extra phrases from the feature
        feature = feature.replace("all ", "").replace("the ", "")

        # Remove extra phrases from the location
        location_parts = location_str.split(" with ")
        location = location_parts[0].strip(".,")

        geo_filter = GeographicFilter(area_name=location, bounding_box=None)
        return ParsedPrompt(feature=feature, geographic_filter=geo_filter)

    return None

def get_osm_tag(feature: str) -> Optional[OsmTag]:
    """
    Gets the OSM tag for a given feature using web search.
    """
    query = f"OSM tag for {feature}"
    try:
        search_results = google_web_search(query=query)
        
        if search_results and search_results.get("results"):
            for result in search_results["results"]:
                title = result.get("title", "")
                match = re.search(r"(\w+)=([\w:]+)", title)
                if match:
                    return OsmTag(key=match.group(1), value=match.group(2))
    except NameError:
        pass
    except Exception:
        pass
    return None

def validate_tag(tag: OsmTag) -> bool:
    """
    Validates a tag against the OSM taginfo database.
    """
    url = f"https://taginfo.openstreetmap.org/tags/{tag.key}={tag.value}"
    try:
        content = web_fetch(prompt=url)
        if content and "Taginfo" in content and "tag not found" not in content.lower():
            return True
    except NameError:
        pass
    except Exception:
        pass
    return False

def generate_query(prompt: str, output_format: str = "json") -> str:
    """
    Generates an Overpass QL query from a natural language prompt.
    """
    parsed_prompt = parse_prompt(prompt)
    if not parsed_prompt:
        return f"[out:{output_format}];\n-- Unable to parse prompt\n"

    tag = get_osm_tag(parsed_prompt.feature)

    if not tag or not validate_tag(tag):
        return f"[out:{output_format}];\n-- Unknown or invalid feature: {parsed_prompt.feature}\n"

    if parsed_prompt.geographic_filter.bounding_box:
        bbox = parsed_prompt.geographic_filter.bounding_box
        area_filter = f"({bbox.south},{bbox.west},{bbox.north},{bbox.east})"
        area_definition = f"// Bounding box: {bbox.south},{bbox.west},{bbox.north},{bbox.east}"
    elif parsed_prompt.geographic_filter.area_name:
        area_filter = "(area.searchArea)"
        area_definition = f"area[name=\"{parsed_prompt.geographic_filter.area_name}\"]->.searchArea;"
    else:
        # Should not happen if parsing is correct
        return f"[out:{output_format}];\n-- No location or area specified\n"


    return f"""// Generated by Overpass QL Generator
// Prompt: {prompt}

[out:{output_format}];

// Define the search area
{area_definition}

// Gather results
(
  // Find nodes with the specified tag
  node["{tag.key}"="{tag.value}"]{area_filter};
  // Find ways with the specified tag
  way["{tag.key}"="{tag.value}"]{area_filter};
  // Find relations with the specified tag
  relation["{tag.key}"="{tag.value}"]{area_filter};
);

// Print results
out body;
>;
out skel qt;"""