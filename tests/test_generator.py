import unittest
from unittest.mock import patch
from generator import parse_prompt, get_osm_tag, validate_tag, generate_query

class TestGenerator(unittest.TestCase):
    def test_parse_prompt(self):
        """
        Tests the parse_prompt function.
        """
        prompt = "Show me all bicycle parking in Paris."
        entities = parse_prompt(prompt)
        self.assertEqual(entities, {"feature": "bicycle parking", "location": "Paris"})

        prompt = "Find all cafes in Berlin with outdoor seating"
        entities = parse_prompt(prompt)
        self.assertEqual(entities, {"feature": "cafes", "location": "Berlin"})

    @patch('generator.google_web_search')
    def test_get_osm_tag(self, mock_google_web_search):
        """
        Tests the get_osm_tag function.
        """
        mock_google_web_search.return_value = {
            "results": [
                {"title": "Tag:amenity=cafe - OpenStreetMap Wiki"},
                {"title": "Key:amenity - OpenStreetMap Wiki"},
            ]
        }
        tag = get_osm_tag("cafe")
        self.assertEqual(tag, ('amenity', 'cafe'))

    @patch('generator.web_fetch')
    @patch('generator.google_web_search')
    def test_generate_query_cafe(self, mock_google_web_search, mock_web_fetch):
        """
        Tests the generate_query function with a cafe prompt.
        """
        mock_google_web_search.return_value = {
            "results": [
                {"title": "Tag:amenity=cafe - OpenStreetMap Wiki"},
            ]
        }
        mock_web_fetch.return_value = "<html><head><title>Tag:amenity=cafe - Taginfo</title></head><body></body></html>"
        prompt = "Find all cafes in Berlin"
        query = generate_query(prompt)
        self.assertIn('area[name="Berlin"]->.searchArea;', query)
        self.assertIn('node["amenity"="cafe"](area.searchArea);', query)

    @patch('generator.google_web_search')
    def test_generate_query_unknown_feature(self, mock_google_web_search):
        """
        Tests the generate_query function with an unknown feature.
        """
        mock_google_web_search.return_value = {"results": []}
        prompt = "Show me all unicorns in London."
        query = generate_query(prompt)
        self.assertIn("-- Unknown or invalid feature: unicorns", query)

    @patch('generator.web_fetch')
    @patch('generator.google_web_search')
    def test_generate_query_with_comments(self, mock_google_web_search, mock_web_fetch):
        """
        Tests that the generated query includes comments.
        """
        mock_google_web_search.return_value = {
            "results": [
                {"title": "Tag:amenity=cafe - OpenStreetMap Wiki"},
            ]
        }
        mock_web_fetch.return_value = "<html><head><title>Tag:amenity=cafe - Taginfo</title></head><body></body></html>"
        prompt = "Find all cafes in Berlin"
        query = generate_query(prompt)
        self.assertIn("// Generated by Overpass QL Generator", query)
        self.assertIn(f"// Prompt: {prompt}", query)
        self.assertIn("// Define the search area", query)

    @patch('generator.web_fetch')
    def test_validate_tag_valid(self, mock_web_fetch):
        """
        Tests that validate_tag returns True for a valid tag.
        """
        mock_web_fetch.return_value = "<html><head><title>Tag:amenity=cafe - Taginfo</title></head><body></body></html>"
        self.assertTrue(validate_tag(('amenity', 'cafe')))

    @patch('generator.web_fetch')
    def test_validate_tag_invalid(self, mock_web_fetch):
        """
        Tests that validate_tag returns False for an invalid tag.
        """
        mock_web_fetch.return_value = "<html><head><title>Taginfo</title></head><body>tag not found</body></html>"
        self.assertFalse(validate_tag(('amenity', 'invalid_tag')))

    @patch('generator.web_fetch')
    @patch('generator.google_web_search')
    def test_generate_query_with_invalid_tag(self, mock_google_web_search, mock_web_fetch):
        """
        Tests that generate_query handles an invalid tag.
        """
        mock_google_web_search.return_value = {
            "results": [
                {"title": "Tag:amenity=invalid_tag - OpenStreetMap Wiki"},
            ]
        }
        mock_web_fetch.return_value = "<html><head><title>Taginfo</title></head><body>tag not found</body></html>"
        prompt = "Find all invalid_tags in Berlin"
        query = generate_query(prompt)
        self.assertIn("-- Unknown or invalid feature: invalid_tags", query)

    @patch('generator.web_fetch')
    @patch('generator.google_web_search')
    def test_generate_query_output_format(self, mock_google_web_search, mock_web_fetch):
        """
        Tests that the output format can be specified.
        """
        mock_google_web_search.return_value = {
            "results": [
                {"title": "Tag:amenity=cafe - OpenStreetMap Wiki"},
            ]
        }
        mock_web_fetch.return_value = "<html><head><title>Tag:amenity=cafe - Taginfo</title></head><body></body></html>"
        prompt = "Find all cafes in Berlin"
        query = generate_query(prompt, output_format="xml")
        self.assertIn("[out:xml];", query)

    @patch('generator.web_fetch')
    @patch('generator.google_web_search')
    def test_generate_query_with_bbox(self, mock_google_web_search, mock_web_fetch):
        """
        Tests that a query with a bounding box is generated correctly.
        """
        mock_google_web_search.return_value = {
            "results": [
                {"title": "Tag:amenity=cafe - OpenStreetMap Wiki"},
            ]
        }
        mock_web_fetch.return_value = "<html><head><title>Tag:amenity=cafe - Taginfo</title></head><body></body></html>"
        prompt = "Find all cafes in bbox 48.85,2.34,48.86,2.35"
        query = generate_query(prompt)
        self.assertIn("// Bounding box: 48.85,2.34,48.86,2.35", query)
        self.assertIn('node["amenity"="cafe"](48.85,2.34,48.86,2.35);', query)

if __name__ == '__main__':
    unittest.main()